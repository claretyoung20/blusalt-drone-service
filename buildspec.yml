#version: 0.2
#
#phases:
#  pre_build:
#    commands:
#      - echo Logging in to Amazon ECR...
#      - aws --version
#      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
#      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO
#      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
#      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
#  build:
#    commands:
#      - echo Build started on `date`
#      - echo building the Jar file
#      - mvn clean install
#      - echo Building the Docker image...
#      - docker build -t $REPOSITORY_URI:$BUILD_TAG .
#      - docker tag $REPOSITORY_URI:$BUILD_TAG $REPOSITORY_URI:$IMAGE_TAG
#  post_build:
#    commands:
#      - echo Build completed on `date`
#      - echo Pushing the Docker images...
#      - docker push $REPOSITORY_URI:$BUILD_TAG
#      - docker push $REPOSITORY_URI:$IMAGE_TAG
#      - echo Writing image definitions file...
#      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
#      - cat imagedefinitions.json
#artifacts:
#  files:
#    - imagedefinitions.json
#    - target/DroneService.jar


version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto11  # You can specify the version of Java here, such as corretto8, corretto11, etc.
    commands:
      # Update the system and install Maven if it's not available in the build environment.
      - echo Installing Maven
      - apt-get update -y
      - apt-get install -y maven
  pre_build:
    commands:
      # Here you can put commands that should run before the build, like unit tests or code analysis
      - mvn clean install
